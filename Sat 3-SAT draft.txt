if c->taille ==1 then
	//c->taille += 2
	newVars = newClause()
	addToClause( {CNF->nbVars(+1), PLUS}, newVars )
	addToClause( {CNF->nbVars(+2), PLUS}, newVars )
	newCNF1 = KneglectedIn( 1, newVars)
	newCNF2 = KneglectedIn( 2, newVars)
	concat(newCNF1,newCNF2)
	curr = newCNF1->tete
	while(curr != NULL)
		addToClause(curr->clause,c->tete->x)
		curr = curr->suivant
	detruireClause(c)
	return newCNF1

else if c->taille == 2 then
	//c->taille
	//newVars = newClause()
	//addToClause( {(CNF->nbVars)/(grille->taille*grille->taille)+1, PLUS}, newVars )
	res = newCNF()
	CopyClause(c,newClause)
	addToClause(c,{(CNF->nbVars)+1, PLUS})
	addToClause(newClause,{(CNF->nbVars)+1, MINUS})
	addToCNF( res, c )
	addToCNF( res, newClause )
	return res
else if c->taille == 3
	return c
else
	newVars = newClause()
	res = addToCNF;
	for (int i = CNF->nbVars+1; i < CNF->nbVars * 2 - 3 ){
		addToClause( {i, PLUS}, newVars )
	}
	currNew = newVars->tete
	currCl = c->tete
	clause Cprim = newClause()
	addToClause(Cprim, currCl->x)
	currC1 = currC1->suivant
	addToClause(Cprim, currCl->x)
	addToClause(Cprim, currNew->x)
	addToCNF(res,Cprim)
	
	while(currCl->suivant->suivant == NULL && currNew->suivant == NULL){
		addToClause(Cprim, currNew->x, true)
		currNew = currNew->suivant
		addToClause(Cprim, currC1->x, true)
		currC1 = currC1->suivant
		addToClause(Cprim, currNew->x, false)
		addToCNF(res,Cprim)
	}
	addToClause(Cprim, currNew->x, true)
	addToClause(Cprim, currC1->x, false)
	currC1 = currC1->suivant
	addToClause(Cprim, currC1->x, false)
	addToCNF(res,Cprim)
	return res
}